### One
    import React from 'react';

    eslint will throw an error, that (React) is not defined.Because eslint doesnot know how React works
    To make it understand React well we have to add some packages

    * yarn add -D babel-eslint eslint-plugin-import eslint-plugin-jsx-a11y eslint-plugin-react
    a11y -> stands for accessibility

### Two -> jsx
    Q - What JSX Do?
    It's just translating those HTML tags into React.createElement calls. That's it. Really. No more magic here.

### Three -> component-name
    Composite Component name must be (capitalize).
    If you make it lowercase, it will try to have pet as a web component and not a Reacconst [breeds, setBreeds] = useState([]);
### Four -> expression
    const x = name.toUpperCase()

    here as a whole it is an statement, but right side is an expression.
    (if...else) is a statement. But (ternery operator is an expression)

### Five - Hooks
    *** All hooks name starts with "use". This is applicable for custom-hooks.

    *** A fundamental thing about (hooks) is they never go inside of (if...else) statement.
    Also (for...loop) or any kind of logic.

    An absolutely key concept for you to grasp is hooks rely on this strict ordering. As such,
    do not put hooks inside if statements or loops. If you do, you'll have insane bugs that involve
    useState returning the wrong state. If you see useState returning the wrong piece of state,
    this is likely what you did.

    Because the previous point is so absolutely critical, the React team has provided us with a lint rule that help us not fall into that trap. That lint rule relies on us, the developers, to follow the convention of calling our hooks "useXxxxxx". If you're willing to do that, the lint rules will guard you from calling the hooks out of order.
        i have to install a dev-dependency - "eslint-plugin-react-hooks"

    *** useState returns to us an array with two things in it: the current value of that state and
    a function to update that function. We're using a feature of JavaScript called destructuring
    to get both of those things out of the array.

### Six -> @fronendmasters/pet
    This is the pet API client. It communicates with the Frontend Masters API for retrieving
    information about pets that can be adopted.

### Seven -> React-Hooks BuilIn
    useState() -> is a Hook that lets you add React state to function components
    useEffect() ->
    useReducer() -> For doing Redux like reducers
    useRefs() -> when you need to have programmatic access to a DOM node
    useContext() ->